@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'image-test && !master'
    }
    tools {
        maven 'kie-maven-3.6.0'
        jdk 'kie-jdk1.8'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timeout(time: 720, unit: 'MINUTES')
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'

            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    def SETTINGS_XML_ID = "5d9884a1-178a-4d67-a3ac-9735d2df2cef"

                    // This is the map project, variable to store the version from this project
                    def repositoryListPath = "./script/repository-list.txt"
                    def projectVariableMap = ['kiegroup_droolsjbpm-build-bootstrap': "kieVersion", 'jboss-integration_izpack': "izpackVersion", 'jboss-integration_installer-commons': "installerCommonsVersion"]
                    def nightlyStages = load("$WORKSPACE/nightly.stages")

                    configFileProvider([configFile(fileId: "49737697-ebd6-4396-9c22-11f7714808eb", variable: 'PRODUCTION_PROJECT_LIST')]) {
                        println "Reading file ${repositoryListPath} and merging it with ${PRODUCTION_PROJECT_LIST} jenkins file"
                        def communityProjectListFile = readFile repositoryListPath
                        def projectCollection = communityProjectListFile.readLines()
                        def productionProjectListFile = readFile "${env.PRODUCTION_PROJECT_LIST}"
                        projectCollection.addAll(productionProjectListFile.readLines())
                        println "File ${repositoryListPath} and ${env.PRODUCTION_PROJECT_LIST} jenkins file merged in ${projectCollection}"
                        nightlyStages(SETTINGS_XML_ID, projectCollection, "rhba/nightly", projectVariableMap)
                    }

                    build job:'RHBA properties generator' , parameters:[
                        string(name: 'PRODUCT_VERSION',value: '${env.productVersion}')
                        string(name: 'TIME_STAMP',value:'${env.datetimeSuffix}')
                        string(name: 'ERRAI_VERSION',value:'${env.erraiVersion}')
                        string(name: 'MVEL_VERSION',value:'${env.mvelVersion}')
                        string(name: 'IZPACK_VERSION',value:'${env.izpackVersion}')
                        string(name: 'INSTALLER_COMMONS_VERSION',value:'${env.installerCommonsVersion}')
                    ]
                }
            }
        }
    }
    post {
        unstable {
            script {
                mailer.sendEmailFailure()
            }
        }
        failure {
            script {
                mailer.sendEmailFailure()
            }
        }
        always {
            //junit '**/target/surefire-reports/**/*.xml'
            cleanWs()
        }
    }
}